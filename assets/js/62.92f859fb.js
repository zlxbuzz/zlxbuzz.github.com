(window.webpackJsonp=window.webpackJsonp||[]).push([[62],{356:function(t,a,s){"use strict";s.r(a);var e=s(10),n=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"git-总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-总结"}},[t._v("#")]),t._v(" git 总结")]),t._v(" "),a("h2",{attrs:{id:"修改提交记录"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#修改提交记录"}},[t._v("#")]),t._v(" 修改提交记录")]),t._v(" "),a("p",[t._v("git commit --amend 会修改最后一个 commit 记录，同时也会修改 commitid")]),t._v(" "),a("h2",{attrs:{id:"合并多次零散的提交"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#合并多次零散的提交"}},[t._v("#")]),t._v(" 合并多次零散的提交")]),t._v(" "),a("p",[t._v("前言: 有时候我们在开发一个功能的时候，可能会有多个提交记录，这个一来比较零散，同时当功能分支合并到发版分支的时候，可能会比较混乱，不利于日后的历史管理，我们可以采用"),a("code",[t._v("git rebase -i")]),t._v("来合并这些零散的提交")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" rebase "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-i")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("commitid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("你要合并的提交记录的前一条commitid作为base"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 会出现一个编辑器输入框,我们只要关注s即可，意思是将提交记录合并的上一个commit中")]),t._v("\n\npick 32e3951 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(":1\npick 803bfc5 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(":2\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Rebase 1922107..803bfc5 onto 1922107 (2 commands)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Commands:")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# p, pick <commit> = use commit")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# r, reword <commit> = use commit, but edit the commit message")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# e, edit <commit> = use commit, but stop for amending")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# s, squash <commit> = use commit, but meld into previous commit")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# f, fixup <commit> = like "squash", but discard this commit\'s log message')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# x, exec <command> = run command (the rest of the line) using shell")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# d, drop <commit> = remove commit")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# l, label <label> = label current HEAD with a name")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# t, reset <label> = reset HEAD to a label")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# m, merge [-C <commit> | -c <commit>] <label> [# <oneline>]")]),t._v("\n\n")])])]),a("p",[t._v("我们将第二个提交的"),a("code",[t._v("pick")]),t._v("改成"),a("code",[t._v("s")]),t._v("即可")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("pick 32e3951 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(":1\ns 803bfc5 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(":2\n")])])]),a("p",[t._v("保存退出之后会弹出另外一个输入框，直接输出最终你需要的"),a("code",[t._v("commit message")]),t._v("就可以了")]),t._v(" "),a("h2",{attrs:{id:"git-worktree-使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-worktree-使用"}},[t._v("#")]),t._v(" git worktree 使用")]),t._v(" "),a("p",[a("code",[t._v("前言： 在前端开发中，经常会遇到一些问题:")])]),t._v(" "),a("p",[t._v("1.我要切一个分支去更新 node_modules 的依赖，然后切回去的时候，node_modules 不做版本管理，但是还是需要原来的依赖,就又得重新 install 依赖，否则可能会依赖不一致导致程序报错,然后切回新分支又得重新 install，比较麻烦而已容易遗忘`")]),t._v(" "),a("p",[t._v("2.又或者我在某个分支进行开发，临时要改别的分支的代码，用 git stash 还是比较麻烦，临时 commit 又没什么意义,而且容易出错")]),t._v(" "),a("p",[t._v("针对上面的一些问题，最近无意间看到"),a("code",[t._v("git worktree")]),t._v("的用法，试了下能够很好的解决这个问题，特意总结一下:")]),t._v(" "),a("h3",{attrs:{id:"git-worktree"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-worktree"}},[t._v("#")]),t._v(" git worktree")]),t._v(" "),a("p",[t._v("默认情况下，git 仓库只有一个 worktree，就是 master 分支,可以通过"),a("code",[t._v("git worktree list")]),t._v(" 来查看")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" worktree list\n/Users/buzz/Code/demo/git/worktree  7473a35 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("master"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),a("p",[t._v("比如我现在要新做一个功能，升级 webpack2 到 webpack4,我可以如下操作:")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" worktree "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" feature-webpack4\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## feature-webpack4 相当于一个path，默认就会在当前建立一个feature-webpack4的目录")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 同时多一个feature-webpack4分支")]),t._v("\n")])])]),a("p",[t._v("之后我们就可以在 "),a("code",[t._v("feature-webpack4")]),t._v(" 目录安装最新的依赖，这是一个独立的目录，我们直接可以 "),a("code",[t._v("cd")]),t._v(" 进去安装最新的"),a("code",[t._v("webpack4")]),t._v("进行开发。")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" feature-webpack4\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("yarn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" webpack@4\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-m")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"update webpack4"')]),t._v("\n")])])]),a("p",[t._v("如果想在原来的 webpack2 环境下开发，直接跳出 feature-webpack4 目录即可，又回到来了原来的 webpack2 的环境。\n之后想要合并升级后的依赖，直接合并对应分支即可。")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merge feature-webpack4\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("yarn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 就会根据最新的依赖package.json来安装webpack4")]),t._v("\n")])])]),a("p",[t._v("合并完成之后就可以通过"),a("code",[t._v("git worktree remove feature-webpack4")]),t._v("来清理 worktree,"),a("code",[t._v("feature-webpack4")]),t._v("分支可以手动清除。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("其他的一些指令可以通过 `git worktree --help`来获取更多的信息\n")])])]),a("h2",{attrs:{id:"commit-message-格式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#commit-message-格式"}},[t._v("#")]),t._v(" Commit Message 格式")]),t._v(" "),a("p",[t._v("对于"),a("code",[t._v("update")]),t._v("和"),a("code",[t._v("fix bug")]),t._v("等提交记录已经看的忍受不了，需要更加优雅,更加强制的提交方式。")]),t._v(" "),a("p",[t._v("采用"),a("a",{attrs:{href:"https://github.com/commitizen/cz-cli",target:"_blank",rel:"noopener noreferrer"}},[t._v("Commitizen"),a("OutboundLink")],1),t._v("和 "),a("a",{attrs:{href:"https://github.com/commitizen/cz-conventional-changelog",target:"_blank",rel:"noopener noreferrer"}},[t._v("cz-conventional-changelog"),a("OutboundLink")],1),t._v(" 工具来约束和生成 "),a("code",[t._v("Git Message")])]),t._v(" "),a("h3",{attrs:{id:"安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装"}},[t._v("#")]),t._v(" 安装")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-g")]),t._v(" commitizen cz-conventional-changelog "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 全局安装，有些需要sudo")]),t._v("\n")])])]),a("h3",{attrs:{id:"配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置"}},[t._v("#")]),t._v(" 配置")]),t._v(" "),a("p",[t._v("针对项目安装依赖 husky")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("yarn add husky --dev\n")])])]),a("p",[t._v("配置 package.json")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"config"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"commitizen"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"path"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"cz-conventional-changelog"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 配置预设的cz-conventional-changelog")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(",\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"husky"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hooks"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"prepare-commit-msg"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"exec < /dev/tty && git cz --hook"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 对于git commit 的钩子处理")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("效果如下:")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://image-static.segmentfault.com/318/422/3184229968-5ce501d49f3b6_articlex",alt:"clipboard.png"}})]),t._v(" "),a("h3",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("p",[t._v("好的规范伴随一生")])])}),[],!1,null,null,null);a.default=n.exports}}]);