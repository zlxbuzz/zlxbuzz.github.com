(window.webpackJsonp=window.webpackJsonp||[]).push([[113],{408:function(s,t,a){"use strict";a.r(t);var n=a(10),e=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"网络相关"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#网络相关"}},[s._v("#")]),s._v(" 网络相关")]),s._v(" "),t("h4",{attrs:{id:"tcp-和-udp-传输控制协议和用户数据协议"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tcp-和-udp-传输控制协议和用户数据协议"}},[s._v("#")]),s._v(" TCP 和 UDP(传输控制协议和用户数据协议)")]),s._v(" "),t("p",[s._v("TCP:全双工，在链接建立之后，可以随时进行数据发送；设有缓存；面向字节流\nUDP：无连接，不保证可靠；面向报文；没有拥塞控制；支持 1 对 1，1 对多，多对 1，多对多;（适合直播，实时视频）")]),s._v(" "),t("p",[s._v("单工数据传输是数据只能在一个方向上传输；\n半双工数据传输允许数据在两个方向上传输，但是，在某一时刻，只允许数据在一个方向上传输，它实际上是一种切换方向的单工通信；\n全双工数据通信允许数据同时在两个方向上传输，因此，全双工通信是两个单工通信方式的结合，它要求发送设备和接收设备都有独立的接收和发送能力。")]),s._v(" "),t("p",[s._v("TCP:\n三次握手连接： 1.开始建立连接时，客户端向服务器发出连接请求报文，报文首部中的同部位 SYN = 1，同时选择一个初始序列号 seq = x ，这时客户端进程进入了 SYN- SENT （同步已发送状态）状态，等待服务器确认。 2.服务器收到 syn 包后，如果同意连接，则发出确认报文；确认报文 ACK = 1，SYN = 1，确认号是 ack = x + 1，同时也要为自己初始化一个序列号 seq = y，此时服务器进程进入了 SYN-RCVD（同步收到）状态。 3.客户端收到服务器的 SYN + ACK 包，要向服务器给出确认。确认报文的 ACK = 1，ack = y + 1，自己的序列号 seq = x + 1。此时，TCP 连接建立，客户端进入 ESTABLISHED （已建立连接）状态。")]),s._v(" "),t("p",[s._v("四次挥手断开： 1.客户端进程发出连接释放报文，并且停止发送数据。释放数据报文首部 FIN = 1，其序列号为 seq = u（等于前面已经传送过来的数据最后一个字节的序号加 1）。此时，客户端进入 FIN-WAIT-1（终止等待 1）状态。 2.服务器收到连接释放报文，发出确认报文，ACK = 1，ack = u + 1，并且带上自己的序列号 seq = v（客户端已经没有数据要发送了，但是服务器若发送数据，客户端依然要接受），此时，服务端就进入了 CLOSE-WAIT（关闭等待）状态。 3.服务器将最后的数据发送完毕后，就向客户端发送连接中断报文，FIN = 1，ack = u + 1，由于在半关闭状态，服务器很可能又发送了一些数据，假定此时的序列号为 seq = w，此时，服务器就进入了 LAST- ACK（最后确认）状态，等待客户端的确认。 4.客户端收到服务器的连接释放报文后，必须发出确认，ACK = 1，ack = w + 1，而自己的序列号是 seq = u + 1。此时，客户端就进入了 TIME-WAIT（时间等待）状态。\n服务器只要收到了客户端发出的确认，立即进入 CLOSED 状态。同样，撤销 TCB 后，就结束了这次的 TCP 连接（注意此时 TCP 连接还没有释放，必须经过 2MSL（最长报文段寿命）的时间后，当客户端撤销相应的 TCB 后，才进入 CLOSED 状态）。服务器只要收到了客户端发出的确认，立即进入 CLOSED 状态。同样，撤销 TCB 后，就结束了这次的 TCP 连接。")]),s._v(" "),t("h4",{attrs:{id:"状态码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#状态码"}},[s._v("#")]),s._v(" 状态码")]),s._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//继续 请求者应当继续提出请求。服务器返回此代码表示已收到请求的第一部分，正在等待其余部分")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("101")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//切换协议 请求者已要求服务器切换协议，服务器已确认并准备切换")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("200")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//成功 服务器已经成功处理了请求，通常，这表示服务器提供了请求的网页")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("201")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//已创建 请求成功并且服务器创建了新的资源")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("202")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//已接受 服务器已接受请求，但尚未处理")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("203")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//非授权信息 服务器已经成功处理了请求，但返回的信息可能来自另一来源")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("204")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//无内容 服务器成功处理了请求，但没有返回任何内容")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("205")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//重置内容 服务器成功处理了请求，但没有返回任何内容")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("206")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//部分内容 服务器成功处理了部分 GET 请求")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("300")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//多种选择 针对请求，服务器可执行多种操作。服务器可根据请求者（user agent）选择一项操作，或提供操作列表供请求者选择")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("301")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//永久移动 请求的网页已永久移动到新位置。服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("302")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//临时移动 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("303")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//查看其他位置 请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("304")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//未修改 自动上次请求后，请求的网页未修改过。服务器返回此响应，不会返回网页的内容")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("305")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//使用代理 请求者只能使用代理访问请求的网页。如果服务器返回此响应，还表示请求者应使用代理")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("307")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//临时性重定向 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有的位置来进行以后的请求")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("400")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//错误请求 服务器不理解请求的语法")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("401")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//未授权 请求要求身份验证。对于需要登录的网页，服务器可能返回此响应")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("403")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//禁止 服务器拒绝请求")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("404")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//未找到 服务器找不到请求的网页")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("405")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//方法禁用 禁用请求中指定的方法")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("406")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//不接受 无法使用请求的内容特性响应请求的网页")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("407")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//需要代理授权 此状态码与 401（未授权）类似，但指定请求者应当授权使用代理")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("408")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//请求超时 服务器等候请求时发生超时")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("409")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//冲突 服务器在完成请求时发生冲突。服务器必须在响应中包含有关冲突的信息")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("410")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//已删除 如果请求的资源已永久删除，服务器就会返回此响应")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("411")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//需要有效长度 服务器不接受不含有效内容长度标头字段的请求")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("412")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//未满足前提条件 服务器未满足请求者在请求者设置的其中一个前提条件")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("413")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//请求实体过大 服务器无法处理请求，因为请求实体过大，超出了服务器的处理能力")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("414")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//请求的 URI 过长 请求的 URI（通常为网址）过长，服务器无法处理")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("415")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//不支持媒体类型 请求的格式不受请求页面的支持")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("416")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//请求范围不符合要求 如果页面无法提供请求的范围，则服务器会返回此状态码")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("417")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//未满足期望值 服务器未满足“期望”请求标头字段的要求")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("500")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//服务器内部错误 服务器遇到错误，无法完成请求")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("501")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//尚未实施 服务器不具备完成请求的功能。例如，服务器无法识别请求方法时可能会返回此代码")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("502")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//错误网关 服务器作为网关或代理，从上游服务器无法收到无效响应")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("503")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//服务器不可用 服务器目前无法使用（由于超载或者停机维护）。通常，这只是暂时状态")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("504")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//网关超时 服务器作为网关代理，但是没有及时从上游服务器收到请求")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("505")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//HTTP 版本不受支持 服务器不支持请求中所用的 HTTP 协议版本")]),s._v("\n")])])]),t("h2",{attrs:{id:"缓存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#缓存"}},[s._v("#")]),s._v(" 缓存")]),s._v(" "),t("h4",{attrs:{id:"缓存位置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#缓存位置"}},[s._v("#")]),s._v(" 缓存位置")]),s._v(" "),t("p",[s._v("1.memory cache(优先访问，关闭浏览器后访问 disk cache)\n2.disk cache\n3.Service Worker")]),s._v(" "),t("h4",{attrs:{id:"缓存策略"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#缓存策略"}},[s._v("#")]),s._v(" 缓存策略")]),s._v(" "),t("p",[s._v("1.强缓存\nExpires")]),s._v(" "),t("p",[s._v("Cache-control:\nno-cache: 会走协商缓存\nmax-age:0 会走协商缓存\nno-store\npublic\nprivate\nmust-revalidate: 会走协商缓存")]),s._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("Cache"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("Control"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" max"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("age"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("60")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" must"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("revalidate\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//  如果在60s之内，会走强缓存，不然就会走协商缓存")]),s._v("\n")])])]),t("p",[s._v("2.协商缓存\nEtag,if-None-Match(优先级高)\nLast-modified,if-Modified-Since")]),s._v(" "),t("h2",{attrs:{id:"gzip"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#gzip"}},[s._v("#")]),s._v(" gzip")]),s._v(" "),t("p",[s._v("compression-webpack-plugin 插件可以生成对应的 gz 文件")]),s._v(" "),t("p",[s._v("nginx 的动态压缩是对每个请求先压缩再输出，这样造成虚拟机浪费了很多 cpu，解决这个问题可以利用 nginx 模块 Gzip Precompression，这个模块的作用是对于需要压缩的文件，直接读取已经压缩好的文件(文件名为加.gz)，而不是动态压缩，对于不支持 gzip 的请求则读取原文件")])])}),[],!1,null,null,null);t.default=e.exports}}]);