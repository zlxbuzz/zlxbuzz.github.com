(window.webpackJsonp=window.webpackJsonp||[]).push([[70],{364:function(e,r,t){"use strict";t.r(r);var o=t(10),v=Object(o.a)({},(function(){var e=this,r=e._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"前端工程化"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#前端工程化"}},[e._v("#")]),e._v(" 前端工程化")]),e._v(" "),r("h2",{attrs:{id:"require-和-import-的区别"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#require-和-import-的区别"}},[e._v("#")]),e._v(" require 和 import 的区别")]),e._v(" "),r("p",[r("code",[e._v("import:")]),e._v(" "),r("code",[e._v("ES")]),e._v("模块化方案,会被"),r("code",[e._v("js")]),e._v("引擎静态分析，所以是优于代码执行的，不能在代码执行后引入,所以"),r("code",[e._v("import")]),e._v("只能在模块的顶层。")]),e._v(" "),r("p",[r("code",[e._v("require")]),e._v(": "),r("code",[e._v("CommonJS")]),e._v("模块方案，运行时加载模块，可以放在代码的任何位置,加载的是一个对象。")]),e._v(" "),r("p",[r("code",[e._v("import()")]),e._v(": "),r("code",[e._v("ES2020")]),e._v("提案，类似"),r("code",[e._v("require")]),e._v("为动态加载模块,可以用在任何地方，区别是"),r("code",[e._v("require")]),e._v("是同步，"),r("code",[e._v("import()")]),e._v("是异步。")]),e._v(" "),r("p",[r("code",[e._v("require/exports")]),e._v(" 输出的是值的拷贝。一旦输出一个值，模块内部的变化就影响不到这个值。\n"),r("code",[e._v("import/export")]),e._v(" 输出的是值的引用。JS 引擎对脚本静态分析的时候，遇到模块加载命令"),r("code",[e._v("import")]),e._v(" ，就会生成一个只读引用。")])])}),[],!1,null,null,null);r.default=v.exports}}]);