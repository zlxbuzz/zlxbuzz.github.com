(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{347:function(t,a,v){"use strict";v.r(a);var s=v(10),_=Object(s.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"作用域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#作用域"}},[t._v("#")]),t._v(" 作用域")]),t._v(" "),a("p",[t._v("编译：词法分析，语法分析，代码生成(生成及其指令)")]),t._v(" "),a("p",[t._v("1.引擎：负责整体 js 的编译和执行")]),t._v(" "),a("p",[t._v("2.编译器： 负责语法分析和代码生成")]),t._v(" "),a("p",[t._v("3.作用域：负责收集并维护所有声明和标识符(变量)组成的查询，确定执行代码对这些标识符的访问权限。")]),t._v(" "),a("p",[t._v("LHS：查找变量,不关心具体的值，函数声明不包括\nRHS：获取变量的值")]),t._v(" "),a("h4",{attrs:{id:"变量的赋值会执行两个动作-1-编译器会在当前作用域申明一个变量。2-运行时引擎会在作用域中查找该变量-找到就会赋值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#变量的赋值会执行两个动作-1-编译器会在当前作用域申明一个变量。2-运行时引擎会在作用域中查找该变量-找到就会赋值"}},[t._v("#")]),t._v(" 变量的赋值会执行两个动作：1.编译器会在当前作用域申明一个变量。2.运行时引擎会在作用域中查找该变量，找到就会赋值")]),t._v(" "),a("p",[t._v("欺骗作用域的两种方法：eval 和 with")]),t._v(" "),a("h2",{attrs:{id:"变量提升"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#变量提升"}},[t._v("#")]),t._v(" 变量提升")]),t._v(" "),a("p",[t._v("函数声明提升高于变量提升")]),t._v(" "),a("h2",{attrs:{id:"闭包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#闭包"}},[t._v("#")]),t._v(" 闭包")]),t._v(" "),a("p",[t._v("JavaScript 采用的是静态作用域,也叫做词法作用域，在函数定义的时候就确定了作用域")]),t._v(" "),a("p",[t._v("词法作用域关注函数在何处声明，而动态作用域关注函数从何处调用")]),t._v(" "),a("p",[t._v("当函数可以记住并访问所在的词法作用域，即使函数是在当前词法作用域之外执行，这时 就产生了闭包")])])}),[],!1,null,null,null);a.default=_.exports}}]);